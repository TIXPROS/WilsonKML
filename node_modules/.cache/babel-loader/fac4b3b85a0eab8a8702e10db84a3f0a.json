{"ast":null,"code":"var _jsxFileName = \"/root/Bureau/Parser/src/components/Main.js\";\nimport { CircularProgress } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport { Bar } from '@reactchartjs/react-chart.js';\nimport { convert } from \"./Parser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showFile = async e => {\n      e.preventDefault();\n      const reader = new FileReader();\n\n      reader.onload = async e => {\n        const text = e.target.result;\n        var data = convert(text); // console.log(data);\n\n        this.setState({\n          data: data,\n          filed: true\n        });\n      };\n\n      reader.readAsText(e.target.files[0]);\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Convertisseur Kml to JS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => this.showFile(e),\n          accept: \".xml,.kml\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          title: \"Valider\",\n          onClick: () => {\n            if (this.state.filed) {\n              this.setState({\n                loading: true\n              }, () => {\n                this.range();\n              });\n            } else {\n              alert('Veuillez choisir un fichier Ã  convertir');\n            }\n          },\n          children: \"Valider\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.loading && /*#__PURE__*/_jsxDEV(CircularProgress, {\n            color: \"secondary\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 47\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: this.state.filed && this.setChart()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      filed: false,\n      data: [],\n      days: [],\n      finale: [],\n      keys: [],\n      loading: false\n    };\n  }\n\n  async range() {\n    await new Promise(r => setTimeout(r, 3000));\n    var days = [];\n    var final = [];\n    this.state.data.forEach(element => {\n      // console.log(element.date.split('T')[0]);\n      var existed = days.indexOf(element.date.split('T')[0]);\n\n      if (existed === -1) {\n        var dayTMP = element.date.split('T')[0];\n        days.push(dayTMP);\n      }\n    });\n    this.setState({\n      days: days\n    }, () => {\n      days.forEach(element => {\n        var filteredHour = this.state.data.filter(el => el.date.split('T')[0] === element);\n        var tmp = {};\n        tmp['date'] = element;\n        tmp[\"values\"] = filteredHour;\n        final.push(tmp);\n      }); // console.log(final[0].values[0].values);\n\n      this.setState({\n        finale: final,\n        keys: Object.keys(final[0].values[0].values),\n        loading: false\n      }, () => {});\n    });\n    console.log(final[0]);\n  }\n\n  convertDate(date) {\n    var tmp = new Date(date);\n    const options = {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    var final = tmp.toLocaleDateString('fr-FR', options);\n    return final.charAt(0).toUpperCase() + final.slice(1); // console.log(tmp);\n  }\n\n  setChart() {\n    console.log(this.state.finale); // const labels = this.state.finale[0].values.filter((el) => {\n    //     return el.date\n    // })\n    // const state = {\n    //     labels: labels,\n    //     datasets: [\n    //         {\n    //             label: 'Rainfall',\n    //             backgroundColor: 'rgba(75,192,192,1)',\n    //             borderColor: 'rgba(0,0,0,1)',\n    //             borderWidth: 2,\n    //             data: [65, 59, 80, 81, 56]\n    //         }\n    //     ]\n    // }\n    // return (\n    //     <Bar\n    //         data={state}\n    //         options={{\n    //             title: {\n    //                 display: true,\n    //                 text: 'Average Rainfall per month',\n    //                 fontSize: 20\n    //             },\n    //             legend: {\n    //                 display: true,\n    //                 position: 'right'\n    //             }\n    //         }}\n    //     />\n    // )\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/root/Bureau/Parser/src/components/Main.js"],"names":["CircularProgress","React","Component","Bar","convert","Main","constructor","props","showFile","e","preventDefault","reader","FileReader","onload","text","target","result","data","setState","filed","readAsText","files","render","state","loading","range","alert","setChart","days","finale","keys","Promise","r","setTimeout","final","forEach","element","existed","indexOf","date","split","dayTMP","push","filteredHour","filter","el","tmp","Object","values","console","log","convertDate","Date","options","weekday","year","month","day","toLocaleDateString","charAt","toUpperCase","slice"],"mappings":";AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,GAAT,QAAoB,8BAApB;AAGA,SAASC,OAAT,QAAwB,UAAxB;;;AACA,MAAMC,IAAN,SAAmBH,SAAnB,CAA6B;AAEzBI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAYnBC,QAZmB,GAYR,MAAOC,CAAP,IAAa;AACpBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,MAAAA,MAAM,CAACE,MAAP,GAAgB,MAAOJ,CAAP,IAAa;AACzB,cAAMK,IAAI,GAAIL,CAAC,CAACM,MAAF,CAASC,MAAvB;AACA,YAAIC,IAAI,GAAGb,OAAO,CAACU,IAAD,CAAlB,CAFyB,CAGzB;;AACA,aAAKI,QAAL,CAAc;AAAED,UAAAA,IAAI,EAAEA,IAAR;AAAcE,UAAAA,KAAK,EAAE;AAArB,SAAd;AAEH,OAND;;AAOAR,MAAAA,MAAM,CAACS,UAAP,CAAkBX,CAAC,CAACM,MAAF,CAASM,KAAT,CAAe,CAAf,CAAlB;AACH,KAvBkB;;AAAA,SAoGnBC,MApGmB,GAoGV,MAAM;AAEX,0BACI;AAAA,gCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAGI;AAAO,UAAA,IAAI,EAAC,MAAZ;AAAmB,UAAA,QAAQ,EAAGb,CAAD,IAAO,KAAKD,QAAL,CAAcC,CAAd,CAApC;AAAsD,UAAA,MAAM,EAAC;AAA7D;AAAA;AAAA;AAAA;AAAA,gBAHJ,eASI;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAE,MAAM;AACnC,gBAAI,KAAKc,KAAL,CAAWJ,KAAf,EAAsB;AAClB,mBAAKD,QAAL,CAAc;AAAEM,gBAAAA,OAAO,EAAE;AAAX,eAAd,EAAiC,MAAM;AAAE,qBAAKC,KAAL;AAAc,eAAvD;AACH,aAFD,MAEO;AACHC,cAAAA,KAAK,CAAC,yCAAD,CAAL;AACH;AACJ,WAND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATJ,eAiBI;AAAA,oBAEQ,KAAKH,KAAL,CAAWC,OAAX,iBAAsB,QAAC,gBAAD;AAAkB,YAAA,KAAK,EAAC;AAAxB;AAAA;AAAA;AAAA;AAAA;AAF9B;AAAA;AAAA;AAAA;AAAA,gBAjBJ,eAuBI;AAAA,oBAEQ,KAAKD,KAAL,CAAWJ,KAAX,IAAoB,KAAKQ,QAAL;AAF5B;AAAA;AAAA;AAAA;AAAA,gBAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAiEH,KAvKkB;;AAEf,SAAKJ,KAAL,GAAa;AACTJ,MAAAA,KAAK,EAAE,KADE;AAETF,MAAAA,IAAI,EAAE,EAFG;AAGTW,MAAAA,IAAI,EAAE,EAHG;AAITC,MAAAA,MAAM,EAAE,EAJC;AAKTC,MAAAA,IAAI,EAAE,EALG;AAMTN,MAAAA,OAAO,EAAE;AANA,KAAb;AAQH;;AAcU,QAALC,KAAK,GAAG;AACV,UAAM,IAAIM,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA3B,CAAN;AACA,QAAIJ,IAAI,GAAG,EAAX;AACA,QAAIM,KAAK,GAAG,EAAZ;AACA,SAAKX,KAAL,CAAWN,IAAX,CAAgBkB,OAAhB,CAAwBC,OAAO,IAAI;AAC/B;AACA,UAAIC,OAAO,GAAGT,IAAI,CAACU,OAAL,CAAaF,OAAO,CAACG,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAb,CAAd;;AAEA,UAAIH,OAAO,KAAK,CAAC,CAAjB,EAAoB;AAChB,YAAII,MAAM,GAAGL,OAAO,CAACG,IAAR,CAAaC,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAb;AACAZ,QAAAA,IAAI,CAACc,IAAL,CAAUD,MAAV;AACH;AACJ,KARD;AASA,SAAKvB,QAAL,CAAc;AACVU,MAAAA,IAAI,EAAEA;AADI,KAAd,EAEG,MAAM;AACLA,MAAAA,IAAI,CAACO,OAAL,CAAcC,OAAD,IAAa;AACtB,YAAIO,YAAY,GAAG,KAAKpB,KAAL,CAAWN,IAAX,CAAgB2B,MAAhB,CAAwBC,EAAD,IAAQA,EAAE,CAACN,IAAH,CAAQC,KAAR,CAAc,GAAd,EAAmB,CAAnB,MAA0BJ,OAAzD,CAAnB;AACA,YAAIU,GAAG,GAAG,EAAV;AACAA,QAAAA,GAAG,CAAC,MAAD,CAAH,GAAcV,OAAd;AACAU,QAAAA,GAAG,CAAC,QAAD,CAAH,GAAgBH,YAAhB;AAEAT,QAAAA,KAAK,CAACQ,IAAN,CAAWI,GAAX;AACH,OAPD,EADK,CASL;;AAEA,WAAK5B,QAAL,CAAc;AAAEW,QAAAA,MAAM,EAAEK,KAAV;AAAiBJ,QAAAA,IAAI,EAAEiB,MAAM,CAACjB,IAAP,CAAYI,KAAK,CAAC,CAAD,CAAL,CAASc,MAAT,CAAgB,CAAhB,EAAmBA,MAA/B,CAAvB;AAA+DxB,QAAAA,OAAO,EAAE;AAAxE,OAAd,EAA+F,MAAM,CAAG,CAAxG;AACH,KAdD;AAeAyB,IAAAA,OAAO,CAACC,GAAR,CAAYhB,KAAK,CAAC,CAAD,CAAjB;AACH;;AAGDiB,EAAAA,WAAW,CAACZ,IAAD,EAAO;AACd,QAAIO,GAAG,GAAG,IAAIM,IAAJ,CAASb,IAAT,CAAV;AACA,UAAMc,OAAO,GAAG;AAAEC,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,IAAI,EAAE,SAAzB;AAAoCC,MAAAA,KAAK,EAAE,MAA3C;AAAmDC,MAAAA,GAAG,EAAE;AAAxD,KAAhB;AACA,QAAIvB,KAAK,GAAGY,GAAG,CAACY,kBAAJ,CAAuB,OAAvB,EAAgCL,OAAhC,CAAZ;AACA,WAAQnB,KAAK,CAACyB,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgC1B,KAAK,CAAC2B,KAAN,CAAY,CAAZ,CAAxC,CAJc,CAKd;AACH;;AAGDlC,EAAAA,QAAQ,GAAG;AACPsB,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK3B,KAAL,CAAWM,MAAvB,EADO,CAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AApGwB;;AA4K7B,eAAexB,IAAf","sourcesContent":["import { CircularProgress } from '@material-ui/core';\nimport React, { Component } from 'react';\nimport { Bar } from '@reactchartjs/react-chart.js'\n\n\nimport { convert } from \"./Parser\";\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filed: false,\n            data: [],\n            days: [],\n            finale: [],\n            keys: [],\n            loading: false\n        }\n    }\n\n    showFile = async (e) => {\n        e.preventDefault()\n        const reader = new FileReader()\n        reader.onload = async (e) => {\n            const text = (e.target.result)\n            var data = convert(text)\n            // console.log(data);\n            this.setState({ data: data, filed: true })\n\n        };\n        reader.readAsText(e.target.files[0])\n    }\n    async range() {\n        await new Promise(r => setTimeout(r, 3000));\n        var days = []\n        var final = []\n        this.state.data.forEach(element => {\n            // console.log(element.date.split('T')[0]);\n            var existed = days.indexOf(element.date.split('T')[0])\n\n            if (existed === -1) {\n                var dayTMP = element.date.split('T')[0]\n                days.push(dayTMP)\n            }\n        });\n        this.setState({\n            days: days\n        }, () => {\n            days.forEach((element) => {\n                var filteredHour = this.state.data.filter((el) => el.date.split('T')[0] === element)\n                var tmp = {}\n                tmp['date'] = element;\n                tmp[\"values\"] = filteredHour\n\n                final.push(tmp);\n            });\n            // console.log(final[0].values[0].values);\n\n            this.setState({ finale: final, keys: Object.keys(final[0].values[0].values), loading: false }, () => { })\n        })\n        console.log(final[0]);\n    }\n\n\n    convertDate(date) {\n        var tmp = new Date(date)\n        const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n        var final = tmp.toLocaleDateString('fr-FR', options)\n        return (final.charAt(0).toUpperCase() + final.slice(1));\n        // console.log(tmp);\n    }\n\n\n    setChart() {\n        console.log(this.state.finale);\n        // const labels = this.state.finale[0].values.filter((el) => {\n        //     return el.date\n        // })\n        // const state = {\n        //     labels: labels,\n        //     datasets: [\n        //         {\n        //             label: 'Rainfall',\n        //             backgroundColor: 'rgba(75,192,192,1)',\n        //             borderColor: 'rgba(0,0,0,1)',\n        //             borderWidth: 2,\n        //             data: [65, 59, 80, 81, 56]\n        //         }\n        //     ]\n        // }\n        // return (\n        //     <Bar\n        //         data={state}\n        //         options={{\n        //             title: {\n        //                 display: true,\n        //                 text: 'Average Rainfall per month',\n        //                 fontSize: 20\n        //             },\n        //             legend: {\n        //                 display: true,\n        //                 position: 'right'\n        //             }\n        //         }}\n        //     />\n        // )\n    }\n\n    render = () => {\n\n        return (\n            <div>\n                <h2>Convertisseur Kml to JS</h2>\n\n                <input type=\"file\" onChange={(e) => this.showFile(e)} accept='.xml,.kml' />\n                {/* <DataTable\n                    title=\"Arnold Movies\"\n                    columns={columns}\n                    data={this.state.data}\n                /> */}\n                <button title='Valider' onClick={() => {\n                    if (this.state.filed) {\n                        this.setState({ loading: true }, () => { this.range() })\n                    } else {\n                        alert('Veuillez choisir un fichier Ã  convertir')\n                    }\n                }} >Valider</button>\n\n                <div>\n                    {\n                        this.state.loading && <CircularProgress color=\"secondary\" />\n                    }\n                </div>\n\n                <div>\n                    {\n                        this.state.filed && this.setChart()\n                    }\n                    {/* {\n                        this.state.finale.map((_el, index) => (\n                            <div key={index} >\n                                <h3>{this.convertDate(_el.date)}</h3>\n\n                                <table>\n                                    <thead  >\n                                        <tr>\n                                            <th >Heures/Variables</th>\n                                            {\n                                                _el.values.map((el, id) => (\n                                                    <th key={id} >{el.date.split('T')[1].slice(0, 2) + \"h\"}</th>\n                                                ))\n                                            }\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        {\n                                            this.state.keys.map((elem, ind) => (\n                                                <tr key={ind} >\n                                                    <td style={{ fontWeight: 'bold' }} >{elem}</td>\n                                                    {\n                                                        _el.values.map((el, i) => (\n                                                            <td key={i} >{el.values[elem]}</td>\n                                                        ))\n                                                    }\n                                                </tr>\n                                            ))\n                                        }\n                                    </tbody>\n                                </table>\n                            </div>\n                        ))\n                    } */}\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}