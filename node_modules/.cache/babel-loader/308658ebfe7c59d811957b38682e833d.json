{"ast":null,"code":"const parser = require('xml2js');\n\nconst convert = value => {\n  try {\n    var finalData = [];\n    parser.parseString(value, (err, result) => {\n      let days = result[\"kml:kml\"]['kml:Document'][0]['kml:ExtendedData'][0]['dwd:ProductDefinition'][0]['dwd:ForecastTimeSteps'][0]['dwd:TimeStep'];\n      let data = result[\"kml:kml\"]['kml:Document'][0]['kml:Placemark'][0]['kml:ExtendedData'][0][\"dwd:Forecast\"];\n      var tmpData = [];\n      data.forEach(element => {\n        let tmp = element['dwd:value'][0].split(/\\s+/);\n        let filter = tmp.filter(function (el) {\n          return el !== \"\";\n        });\n        tmpData.push([element[\"$\"]['dwd:elementName'], filter]);\n      });\n      days.forEach((element, index) => {\n        let jsonObject = {};\n        let tmp = {};\n        jsonObject.date = element;\n        tmpData.forEach(element => {\n          tmp[element[0]] = element[1][index];\n        });\n        jsonObject.values = tmp;\n        finalData.push(jsonObject);\n      });\n    });\n    return finalData;\n  } catch (error) {\n    console.log(error);\n    alert('Le fichier choisi est incompatible');\n    return false;\n  }\n};\n\nexport { convert };","map":{"version":3,"sources":["/root/Bureau/Parser/src/components/Parser.js"],"names":["parser","require","convert","value","finalData","parseString","err","result","days","data","tmpData","forEach","element","tmp","split","filter","el","push","index","jsonObject","date","values","error","console","log","alert"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,OAAO,GAAIC,KAAD,IAAW;AACvB,MAAI;AACA,QAAIC,SAAS,GAAG,EAAhB;AAEJJ,IAAAA,MAAM,CAACK,WAAP,CAAmBF,KAAnB,EAA0B,CAACG,GAAD,EAAMC,MAAN,KAAiB;AAEvC,UAAIC,IAAI,GAAGD,MAAM,CAAC,SAAD,CAAN,CAAkB,cAAlB,EAAkC,CAAlC,EAAqC,kBAArC,EAAyD,CAAzD,EAA4D,uBAA5D,EAAqF,CAArF,EAAwF,uBAAxF,EAAiH,CAAjH,EAAoH,cAApH,CAAX;AAEA,UAAIE,IAAI,GAAGF,MAAM,CAAC,SAAD,CAAN,CAAkB,cAAlB,EAAkC,CAAlC,EAAqC,eAArC,EAAsD,CAAtD,EAAyD,kBAAzD,EAA6E,CAA7E,EAAgF,cAAhF,CAAX;AACA,UAAIG,OAAO,GAAG,EAAd;AAEAD,MAAAA,IAAI,CAACE,OAAL,CAAcC,OAAD,IAAa;AAGtB,YAAIC,GAAG,GAAGD,OAAO,CAAC,WAAD,CAAP,CAAqB,CAArB,EAAwBE,KAAxB,CAA8B,KAA9B,CAAV;AAEA,YAAIC,MAAM,GAAGF,GAAG,CAACE,MAAJ,CAAW,UAAUC,EAAV,EAAc;AAClC,iBAAOA,EAAE,KAAK,EAAd;AACH,SAFY,CAAb;AAKAN,QAAAA,OAAO,CAACO,IAAR,CAAa,CAACL,OAAO,CAAC,GAAD,CAAP,CAAa,iBAAb,CAAD,EAAkCG,MAAlC,CAAb;AACH,OAXD;AAaAP,MAAAA,IAAI,CAACG,OAAL,CAAa,CAACC,OAAD,EAAUM,KAAV,KAAoB;AAC7B,YAAIC,UAAU,GAAG,EAAjB;AACA,YAAIN,GAAG,GAAG,EAAV;AACAM,QAAAA,UAAU,CAACC,IAAX,GAAkBR,OAAlB;AACAF,QAAAA,OAAO,CAACC,OAAR,CAAgBC,OAAO,IAAI;AACvBC,UAAAA,GAAG,CAACD,OAAO,CAAC,CAAD,CAAR,CAAH,GAAkBA,OAAO,CAAC,CAAD,CAAP,CAAWM,KAAX,CAAlB;AACH,SAFD;AAGAC,QAAAA,UAAU,CAACE,MAAX,GAAoBR,GAApB;AACAT,QAAAA,SAAS,CAACa,IAAV,CAAeE,UAAf;AACH,OATD;AAWH,KA/BD;AAgCA,WAAOf,SAAP;AACC,GApCD,CAoCE,OAAOkB,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAG,IAAAA,KAAK,CAAC,oCAAD,CAAL;AACA,WAAO,KAAP;AACH;AACJ,CA1CD;;AA4CA,SAASvB,OAAT","sourcesContent":["const parser = require('xml2js')\n\nconst convert = (value) => {\n    try {\n        var finalData = []\n\n    parser.parseString(value, (err, result) => {\n\n        let days = result[\"kml:kml\"]['kml:Document'][0]['kml:ExtendedData'][0]['dwd:ProductDefinition'][0]['dwd:ForecastTimeSteps'][0]['dwd:TimeStep'];\n\n        let data = result[\"kml:kml\"]['kml:Document'][0]['kml:Placemark'][0]['kml:ExtendedData'][0][\"dwd:Forecast\"];\n        var tmpData = [];\n\n        data.forEach((element) => {\n\n\n            let tmp = element['dwd:value'][0].split(/\\s+/);\n\n            let filter = tmp.filter(function (el) {\n                return el !== \"\"\n            });\n\n\n            tmpData.push([element[\"$\"]['dwd:elementName'], filter])\n        });\n\n        days.forEach((element, index) => {\n            let jsonObject = {};\n            let tmp = {}\n            jsonObject.date = element;\n            tmpData.forEach(element => {\n                tmp[element[0]] = element[1][index]\n            });\n            jsonObject.values = tmp\n            finalData.push(jsonObject)\n        });\n\n    })\n    return finalData\n    } catch (error) {\n        console.log(error);\n        alert('Le fichier choisi est incompatible')\n        return false;\n    }\n}\n\nexport { convert };"]},"metadata":{},"sourceType":"module"}