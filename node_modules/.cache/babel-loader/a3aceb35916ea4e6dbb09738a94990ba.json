{"ast":null,"code":"const parser = require('xml2js'); //Module d'extraction des données du fichiers KML ou XML\n\n\nconst convert = value => {\n  try {\n    var finalData = [];\n    var issuer = null;\n    var productID = null;\n    var generatingProcess = null;\n    var issueTime = null; // var origin = null\n\n    parser.parseString(value, (err, result) => {\n      //Extraction des jours\n      let days = result[\"kml:kml\"]['kml:Document'][0]['kml:ExtendedData'][0]['dwd:ProductDefinition'][0]['dwd:ForecastTimeSteps'][0]['dwd:TimeStep']; //Extraction des données\n\n      let data = result[\"kml:kml\"]['kml:Document'][0]['kml:Placemark'][0]['kml:ExtendedData'][0][\"dwd:Forecast\"]; //Extraction de données suppléméntaires\n\n      let base = result[\"kml:kml\"]['kml:Document'][0]['kml:ExtendedData'][0]['dwd:ProductDefinition'][0];\n      issuer = base['dwd:Issuer'][0];\n      productID = base['dwd:ProductID'][0];\n      generatingProcess = base['dwd:GeneratingProcess'][0];\n      issueTime = base['dwd:IssueTime'][0];\n      var tmpData = []; //Découpage des données(les entrées étant chacune une unique ligne de caratères, il faut les découper)\n\n      data.forEach(element => {\n        let tmp = element['dwd:value'][0].split(/\\s+/);\n        let filter = tmp.filter(function (el) {\n          return el !== \"\";\n        });\n        tmpData.push([element[\"$\"]['dwd:elementName'], filter]);\n      }); //Epuration des dates\n\n      days.forEach((element, index) => {\n        let jsonObject = {};\n        let tmp = {};\n        jsonObject.date = element;\n        tmpData.forEach(element => {\n          tmp[element[0]] = element[1][index];\n        });\n        jsonObject.values = tmp;\n        finalData.push(jsonObject);\n      });\n    });\n    return {\n      data: finalData,\n      supp: {\n        issuer: issuer,\n        productID: productID,\n        generatingProcess: generatingProcess,\n        issueTime: issueTime\n      }\n    };\n  } catch (error) {\n    console.log(error);\n    alert('Le fichier choisi est incompatible');\n    return false;\n  }\n};\n\nexport { convert };","map":{"version":3,"sources":["/root/Bureau/Parser/src/components/Parser.js"],"names":["parser","require","convert","value","finalData","issuer","productID","generatingProcess","issueTime","parseString","err","result","days","data","base","tmpData","forEach","element","tmp","split","filter","el","push","index","jsonObject","date","values","supp","error","console","log","alert"],"mappings":"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","sourcesContent":["const parser = require('xml2js') //Module d'extraction des données du fichiers KML ou XML\n\nconst convert = (value) => {\n    try {\n        var finalData = []\n        var issuer = null\n        var productID = null\n        var generatingProcess = null\n        var issueTime = null\n        // var origin = null\n\n        parser.parseString(value, (err, result) => {\n\n            //Extraction des jours\n            let days = result[\"kml:kml\"]['kml:Document'][0]['kml:ExtendedData'][0]['dwd:ProductDefinition'][0]['dwd:ForecastTimeSteps'][0]['dwd:TimeStep'];\n\n            //Extraction des données\n            let data = result[\"kml:kml\"]['kml:Document'][0]['kml:Placemark'][0]['kml:ExtendedData'][0][\"dwd:Forecast\"];\n\n\n            //Extraction de données suppléméntaires\n            let base = result[\"kml:kml\"]['kml:Document'][0]['kml:ExtendedData'][0]['dwd:ProductDefinition'][0]\n\n            issuer = base['dwd:Issuer'][0]\n            productID = base['dwd:ProductID'][0]\n            generatingProcess = base['dwd:GeneratingProcess'][0]\n            issueTime = base['dwd:IssueTime'][0]\n\n\n            var tmpData = [];\n\n            //Découpage des données(les entrées étant chacune une unique ligne de caratères, il faut les découper)\n            data.forEach((element) => {\n                let tmp = element['dwd:value'][0].split(/\\s+/);\n\n                let filter = tmp.filter(function (el) {\n                    return el !== \"\"\n                });\n\n\n                tmpData.push([element[\"$\"]['dwd:elementName'], filter])\n            });\n            //Epuration des dates\n            days.forEach((element, index) => {\n                let jsonObject = {};\n                let tmp = {}\n                jsonObject.date = element;\n                tmpData.forEach(element => {\n                    tmp[element[0]] = element[1][index]\n                });\n                jsonObject.values = tmp\n                finalData.push(jsonObject)\n            });\n\n        })\n        return {\n            data: finalData,\n            supp: {\n                issuer: issuer,\n                productID: productID,\n                generatingProcess: generatingProcess,\n                issueTime: issueTime\n            }\n\n        }\n    } catch (error) {\n        console.log(error);\n        alert('Le fichier choisi est incompatible')\n        return false;\n    }\n}\n\nexport { convert };"]},"metadata":{},"sourceType":"module"}